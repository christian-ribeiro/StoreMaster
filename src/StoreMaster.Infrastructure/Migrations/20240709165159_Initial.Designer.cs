// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreMaster.Infrastructure.Persistence.Context;

#nullable disable

namespace StoreMaster.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240709165159_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("idioma", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "001",
                            Description = "Português"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "002",
                            Description = "English"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "003",
                            Description = "Español"
                        });
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("label");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_pai");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("path");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("posicao");

                    b.Property<string>("ToolTip")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("dica");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("visivel");

                    b.HasKey("Id");

                    b.ToTable("menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Label = "Cadastro",
                            Path = "/Cadastro",
                            Position = 1,
                            ToolTip = "",
                            Visible = true
                        },
                        new
                        {
                            Id = 2L,
                            Label = "Produto",
                            ParentId = 1L,
                            Path = "/Produto",
                            Position = 1,
                            ToolTip = "",
                            Visible = true
                        },
                        new
                        {
                            Id = 3L,
                            Label = "Categoria do Produto",
                            ParentId = 1L,
                            Path = "/CategoriaProduto",
                            Position = 2,
                            ToolTip = "",
                            Visible = true
                        },
                        new
                        {
                            Id = 4L,
                            Label = "Usuário",
                            ParentId = 1L,
                            Path = "/Usuario",
                            Position = 3,
                            ToolTip = "",
                            Visible = true
                        },
                        new
                        {
                            Id = 20L,
                            Label = "Configuração",
                            Path = "/Configuração",
                            Position = 2,
                            ToolTip = "",
                            Visible = true
                        },
                        new
                        {
                            Id = 21L,
                            Label = "Configuração do Estoque",
                            ParentId = 20L,
                            Path = "/Estoque",
                            Position = 1,
                            ToolTip = "",
                            Visible = true
                        },
                        new
                        {
                            Id = 40L,
                            Label = "Estoque",
                            Path = "/Estoque",
                            Position = 2,
                            ToolTip = "",
                            Visible = true
                        },
                        new
                        {
                            Id = 41L,
                            Label = "Movimentação de Estoque",
                            ParentId = 40L,
                            Path = "/Movimentacao",
                            Position = 1,
                            ToolTip = "",
                            Visible = true
                        });
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<long?>("ChangeUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_alteracao");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<long>("CreationUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_criacao");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descricao");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_categoria_produto");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("produto", (string)null);
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<long?>("ChangeUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_alteracao");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<long>("CreationUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_criacao");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descricao");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CreationUserId");

                    b.ToTable("categoria_produto", (string)null);
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.StockConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<long?>("ChangeUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_alteracao");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<long>("CreationUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_criacao");

                    b.Property<decimal>("MinimumStockAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("quantidade_minima_estoque");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_produto");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("configuracao_estoque", (string)null);
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.StockMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<long>("CreationUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_criacao");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_produto");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("quantidade");

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnName("sequencia");

                    b.Property<long>("StockMovementTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_tipo_movimento_estoque");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockMovementTypeId");

                    b.ToTable("movimento_estoque", (string)null);
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.StockMovementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("tipo_movimento_estoque", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "001",
                            Description = "Entrada"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "002",
                            Description = "Saída"
                        });
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_idioma");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("senha");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext")
                        .HasColumnName("atualizacao_token");

                    b.Property<long>("UserStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_status_usuario");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.UserMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<long?>("ChangeUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_alteracao");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<long>("CreationUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_criacao");

                    b.Property<bool>("Favorite")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("favorito");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_menu");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("posicao");

                    b.Property<int>("SecondPosition")
                        .HasColumnType("int")
                        .HasColumnName("posicao_secundaria");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("visivel");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ChangeUserId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("MenuId");

                    b.ToTable("menu_usuario", (string)null);
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.UserStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("status_usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "001",
                            Description = "Ativo"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "002",
                            Description = "Inativo"
                        });
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.Product", b =>
                {
                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "ChangeUser")
                        .WithMany("ListChangeUserProduct")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "CreationUser")
                        .WithMany("ListCreationUserProduct")
                        .HasForeignKey("CreationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.ProductCategory", "ProductCategory")
                        .WithMany("ListProduct")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeUser");

                    b.Navigation("CreationUser");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.ProductCategory", b =>
                {
                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "ChangeUser")
                        .WithMany("ListChangeUserProductCategory")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "CreationUser")
                        .WithMany("ListCreationUserProductCategory")
                        .HasForeignKey("CreationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeUser");

                    b.Navigation("CreationUser");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.StockConfiguration", b =>
                {
                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "ChangeUser")
                        .WithMany("ListChangeUserStockConfiguration")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "CreationUser")
                        .WithMany("ListCreationUserStockConfiguration")
                        .HasForeignKey("CreationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.Product", "Product")
                        .WithOne("StockConfiguration")
                        .HasForeignKey("StoreMaster.Infrastructure.Persistence.Entry.StockConfiguration", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeUser");

                    b.Navigation("CreationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.StockMovement", b =>
                {
                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "CreationUser")
                        .WithMany("ListCreationUserStockMovement")
                        .HasForeignKey("CreationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.Product", "Product")
                        .WithMany("ListStockMovement")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.StockMovementType", "StockMovementType")
                        .WithMany("ListStockMovement")
                        .HasForeignKey("StockMovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationUser");

                    b.Navigation("Product");

                    b.Navigation("StockMovementType");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.User", b =>
                {
                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.Language", "Language")
                        .WithMany("ListUser")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.UserStatus", "UserStatus")
                        .WithMany("ListUser")
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.UserMenu", b =>
                {
                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "ChangeUser")
                        .WithMany("ListChangeUserUserMenu")
                        .HasForeignKey("ChangeUserId");

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.User", "CreationUser")
                        .WithMany("ListCreationUserUserMenu")
                        .HasForeignKey("CreationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMaster.Infrastructure.Persistence.Entry.Menu", "Menu")
                        .WithMany("ListUserMenu")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeUser");

                    b.Navigation("CreationUser");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.Language", b =>
                {
                    b.Navigation("ListUser");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.Menu", b =>
                {
                    b.Navigation("ListUserMenu");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.Product", b =>
                {
                    b.Navigation("ListStockMovement");

                    b.Navigation("StockConfiguration");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.ProductCategory", b =>
                {
                    b.Navigation("ListProduct");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.StockMovementType", b =>
                {
                    b.Navigation("ListStockMovement");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.User", b =>
                {
                    b.Navigation("ListChangeUserProduct");

                    b.Navigation("ListChangeUserProductCategory");

                    b.Navigation("ListChangeUserStockConfiguration");

                    b.Navigation("ListChangeUserUserMenu");

                    b.Navigation("ListCreationUserProduct");

                    b.Navigation("ListCreationUserProductCategory");

                    b.Navigation("ListCreationUserStockConfiguration");

                    b.Navigation("ListCreationUserStockMovement");

                    b.Navigation("ListCreationUserUserMenu");
                });

            modelBuilder.Entity("StoreMaster.Infrastructure.Persistence.Entry.UserStatus", b =>
                {
                    b.Navigation("ListUser");
                });
#pragma warning restore 612, 618
        }
    }
}
